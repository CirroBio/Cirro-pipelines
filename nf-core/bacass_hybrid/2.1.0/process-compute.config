profiles {
    standard {
        process {
            errorStrategy = 'retry'
            maxRetries = 3
        }
    }
}

process {
  withName: 'PORECHOP_PORECHOP' {
    ext.prefix = '_porechop'
  }
}

params {
    modules {
        'fastqc' {
            args = "--quiet"
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'skewer' {
            args = "-m pe -q 3 -n --quiet"
            publish_by_meta = ['id', 'shortreads']
            publish_dir = ""
        }
        'nanoplot' {
            args = ""
            publish_by_meta = ['id', 'NanoPlot']
            publish_dir = ""
        }
        'pycoqc' {
            args = ""
            publish_files = [ '.html':'', '.json':'' ]
            publish_by_meta = ['id', 'PycoQC']
            publish_dir = ""
        }
        'porechop' {
            args = ""
            publish_by_meta = ['id', 'longreads']
            publish_dir = ""
        }
        'unicycler' {
            args = ""
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'canu' {
            args = ""
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'minimap_align' {
            args = "-x ava-ont"
            publish_files = false
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'minimap_consensus' {
            args = "-x map-ont"
            publish_files = false
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'minimap_polish' {
            args = "-ax map-ont"
            publish_files = false
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'miniasm' {
            args = ""
            publish_files = [ '_assembly.fasta':'' ]
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'racon' {
            args = ""
            publish_files = [ '_assembly_consensus.fasta':'' ]
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'medaka' {
            args = ""
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'nanopolish' {
            args = ""
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'kraken2' {
            args = ""
            publish_files = [ 'report.txt':'' ]
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'kraken2_long' {
            args = ""
            suffix = "_longreads"
            publish_files = [ 'report.txt':'' ]
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'quast' {
            args = ""
            publish_by_meta = false //the module allows no meta, it collects all assemblies!
            publish_dir = "QUAST"
            suffix = "other_files"
        }
        'prokka' {
            args = ""
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'dfast' {
            args = ""
            publish_by_meta = ['id']
            publish_dir = ""
        }
        'multiqc' {
            args = ""
        }
    }
}