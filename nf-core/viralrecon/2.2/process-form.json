{
  "ui": {},
  "form": {
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "Viral Recon",
    "description": "Assembly and intrahost/low-frequency variant calling for viral samples",
    "type": "object",
    "required": ["input", "genome", "protocol", "platform"],
    "properties": {
      "input": {
        "type": "string",
        "title": "Select A Sample Sheet",
        "file": "*.csv",
        "useS3Path": true,
        "description": "Path to comma-separated file containing information about the samples in the experiment.",
        "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 4 columns, and a header row. See [usage docs](https://nf-co.re/rnaseq/usage#samplesheet-input)."
      },
      "genome": {
        "type": "string",
        "title": "Select A Reference Genome",
        "enum": ["MN908947.3"],
        "default": "MN908947.3"
      },
      "protocol": {
        "type": "string",
        "title": "Select The Sequencing Protocol",
        "enum": ["amplicon", "metagenomic"],
        "default": "amplicon"
      },
      "platform": {
        "type": "string",
        "title": "Select A Platform",
        "enum": ["illumina", "nanopore"],
        "default": "illumina"
      }
    },
    "dependencies": {
      "platform": {
        "oneOf": [
          {
            "properties": {
              "platform": {
                "enum": ["illumina"]
              },
              "illumina_qc_read_trimming_and_filtering_options": {
                "title": "Illumina QC, read trimming and filtering options",
                "type": "object",
                "description": "Options to adjust QC, read trimming and host read filtering with Kraken2 for the Illumina workflow.",
                "default": "",
                "properties": {
                  "skip_cutadapt": {
                    "type": "boolean",
                    "description": "Skip the amplicon trimming step with Cutadapt when using --protocol amplicon.",
                    "default": true
                  }
                },
                "dependencies": {
                  "skip_cutadapt": {
                    "oneOf": [
                      {
                        "properties": {
                          "skip_cutadapt": {
                            "enum": [true]
                          }
                        }
                      },
                      {
                        "properties": {
                          "skip_cutadapt": {
                            "enum": [false]
                          },
                          "kraken2_db": {
                            "type": "string",
                            "format": "path",
                            "default": "s3://nf-core-awsmegatests/viralrecon/input_data/kraken2_human.tar.gz",
                            "description": "Full path to Kraken2 database built from host genome."
                          },
                          "kraken2_db_name": {
                            "type": "string",
                            "default": "human",
                            "description": "Name for host genome as recognised by Kraken2 when using the 'kraken2 build' command."
                          },
                          "kraken2_variants_host_filter": {
                            "type": "boolean",
                            "description": "Remove host reads identified by Kraken2 before running variant calling steps in the pipeline."
                          },
                          "kraken2_assembly_host_filter": {
                            "type": "boolean",
                            "default": true,
                            "description": "Remove host reads identified by Kraken2 before running aseembly steps in the pipeline."
                          },
                          "skip_fastqc": {
                            "type": "boolean",
                            "description": "Skip FastQC."
                          },
                          "skip_kraken2": {
                            "type": "boolean",
                            "description": "Skip Kraken2 process for removing host classified reads."
                          },
                          "skip_fastp": {
                            "type": "boolean",
                            "description": "Skip the initial read trimming step peformed by fastp."
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "illumina_variant_calling_options": {
                "title": "Illumina variant calling options",
                "type": "object",
                "description": "Various options for the variant calling branch of the Illumina workflow.",
                "default": "",
                "properties": {
                  "skip_variants": {
                    "type": "boolean",
                    "description": "Specify this parameter to skip all of the variant calling and mapping steps in the pipeline.",
                    "default": true
                  }
                },
                "dependencies": {
                  "skip_variants": {
                    "oneOf": [
                      {
                        "properties": {
                          "skip_variants": {
                            "enum": [true]
                          }
                        }
                      },
                      {
                        "properties": {
                          "skip_variants": {
                            "enum": [false]
                          },
                          "min_mapped_reads": {
                            "type": "integer",
                            "default": 1000,
                            "description": "Minimum number of mapped reads below which samples are removed from further processing. Some downstream steps in the pipeline will fail if this threshold is too low."
                          },
                          "callers": {
                            "type": "string",
                            "enum": ["ivar", "bcftools"],
                            "description": "Specify which variant calling algorithms you would like to use. Available options are 'ivar' (default for amplicon) and 'bcftools' (default for metagenomic)."
                          },
                          "ivar_trim_noprimer": {
                            "type": "boolean",
                            "description": "This option unsets the '-e' parameter in 'ivar trim' to discard reads without primers."
                          },
                          "ivar_trim_offset": {
                            "type": "integer",
                            "description": "This option sets the '-x' parameter in 'ivar trim' so that reads that occur at the specified offset positions relative to primer positions will also be trimmed.",
                            "help_text": "This parameter will need to be set for some amplicon-based sequencing protocols (e.g. SWIFT) as described and implemented [here](https://github.com/andersen-lab/ivar/pull/88)"
                          },
                          "filter_duplicates": {
                            "type": "boolean",
                            "description": "Filtered duplicates reads detected by Picard MarkDuplicates from alignments."
                          },
                          "skip_ivar_trim": {
                            "type": "boolean",
                            "description": "Skip iVar primer trimming step. Not recommended for --protocol amplicon."
                          },
                          "skip_markduplicates": {
                            "type": "boolean",
                            "default": true,
                            "description": "Skip picard MarkDuplicates step."
                          },
                          "skip_picard_metrics": {
                            "type": "boolean",
                            "description": "Skip Picard CollectMultipleMetrics steps."
                          },
                          "skip_snpeff": {
                            "type": "boolean",
                            "description": "Skip SnpEff and SnpSift annotation of variants."
                          },
                          "skip_consensus": {
                            "type": "boolean",
                            "description": "Skip genome consensus creation step and any downstream QC."
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "illumina_de_novo_assembly_options": {
                "title": "Illumina de novo assembly options",
                "type": "object",
                "description": "Various options for the de novo assembly branch of the Illumina workflow.",
                "default": "",
                "properties": {
                  "skip_assembly": {
                    "type": "boolean",
                    "description": "Specify this parameter to skip all of the de novo assembly steps in the pipeline.",
                    "default": true
                  }
                },
                "dependencies": {
                  "skip_assembly": {
                    "oneOf": [
                      {
                        "properties": {
                          "skip_assembly": {
                            "enum": [true]
                          }
                        }
                      },
                      {
                        "properties": {
                          "skip_assembly": {
                            "enum": [false]
                          },
                          "assemblers": {
                            "type": "string",
                            "enum": ["spades", "unicycler", "minia"],
                            "default": "spades",
                            "description": "Specify which assembly algorithms you would like to use."
                          },
                          "spades_mode": {
                            "type": "string",
                            "enum": [
                              "rnaviral",
                              "corona",
                              "metaviral",
                              "meta",
                              "metaplasmid",
                              "plasmid",
                              "isolate",
                              "rna",
                              "bio"
                            ],
                            "default": "rnaviral",
                            "description": "Specify the SPAdes mode you would like to run."
                          },
                          "spades_hmm": {
                            "type": "string",
                            "folder": "*.hmm",
                            "file": "*.hmm",
                            "multiple": true,
                            "useS3Path": true,
                            "description": "Path to profile HMMs specific for gene/organism to enhance SPAdes assembly."
                          },
                          "blast_db": {
                            "type": "string",
                            "format": "path",
                            "description": "Path to directory or tar.gz archive for pre-built BLAST database."
                          },
                          "skip_bandage": {
                            "type": "boolean",
                            "description": "Skip Bandage image creation for assembly visualisation."
                          },
                          "skip_blast": {
                            "type": "boolean",
                            "description": "Skip blastn of assemblies relative to reference genome."
                          },
                          "skip_abacas": {
                            "type": "boolean",
                            "description": "Skip ABACAS process for assembly contiguation."
                          },
                          "skip_plasmidid": {
                            "type": "boolean",
                            "description": "Skip assembly report generation by PlasmidID."
                          },
                          "skip_assembly_quast": {
                            "type": "boolean",
                            "description": "Skip generation of QUAST aggregated report for assemblies."
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "properties": {
              "platform": {
                "enum": ["nanopore"]
              },
              "nanopore_options": {
                "title": "Nanopore options",
                "type": "object",
                "description": "Options exclusive to running the pipeline on Nanopore data using the ARTIC fieldbioinformatics pipeline.",
                "properties": {
                  "fastq_dir": {
                    "type": "string",
                    "folder": "*.fastq",
                    "useS3Path": true,
                    "description": "Path to a folder containing fastq files from the Nanopore run.",
                    "help_text": "e.g. '--fastq_dir ./20191023_1522_MC-110615_0_FAO93606_12bf9b4f/fastq_pass/'."
                  },
                  "fast5_dir": {
                    "type": "string",
                    "folder": "*.fastq",
                    "useS3Path": true,
                    "help_text": "e.g. '--fast5_dir ./20191023_1522_MC-110615_0_FAO93606_12bf9b4f/fast5_pass/'. Not required when running the pipeline with the '--artic_minion_caller medaka' workflow."
                  },
                  "min_barcode_reads": {
                    "type": "integer",
                    "default": 100,
                    "description": "Minimum number of raw reads required per sample/barcode in order to be considered for the downstream processing steps."
                  },
                  "min_guppyplex_reads": {
                    "type": "integer",
                    "default": 10,
                    "description": "Minimum number of reads required after the artic guppyplex process per sample/barcode in order to be considered for the downstream processing steps."
                  },
                  "artic_minion_caller": {
                    "type": "string",
                    "enum": ["medaka", "nanopolish"],
                    "default": "nanopolish",
                    "description": "Variant caller used when running artic minion."
                  },
                  "artic_minion_aligner": {
                    "type": "string",
                    "enum": ["bwa", "minimap2"],
                    "default": "minimap2",
                    "description": "Aligner used when running artic minion."
                  },
                  "artic_scheme": {
                    "type": "string",
                    "description": "Primer scheme recognised by the artic minion command.",
                    "help_text": "e.g. '--artic_scheme ncov-2019'. See https://artic.readthedocs.io/en/latest/primer-schemes/ and https://github.com/artic-network/primer-schemes/blob/master/schemes_manifest.json."
                  },
                  "artic_minion_medaka_model": {
                    "type": "string",
                    "description": "Parameter passed to artic minion and required when using the '--artic_minion_caller medaka' workflow.",
                    "help_text": "See https://github.com/nanoporetech/medaka"
                  },
                  "skip_pycoqc": {
                    "type": "boolean",
                    "description": "Skip pycoQC."
                  }
                }
              }
            }
          }
        ]
      }
    }
  }
}
