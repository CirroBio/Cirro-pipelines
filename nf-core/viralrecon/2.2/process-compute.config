/*
========================================================================================
    nf-core/viralrecon Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                        = null
    platform                     = null
    protocol                     = null

    // Reference genome options
    genome                       = null
    primer_set                   = null
    primer_set_version           = null
    primer_fasta                 = null
    primer_left_suffix           = '_LEFT'
    primer_right_suffix          = '_RIGHT'
    save_reference               = false

    // Nanopore options
    fastq_dir                    = null
    fast5_dir                    = null
    sequencing_summary           = null
    min_barcode_reads            = 100
    min_guppyplex_reads          = 10
    artic_minion_caller          = 'nanopolish'
    artic_minion_aligner         = 'minimap2'
    artic_minion_medaka_model    = null
    skip_pycoqc                  = false
    skip_nanoplot                = false

    // Nanopore/Illumina options
    asciigenome_read_depth       = 50
    asciigenome_window_size      = 50
    multiqc_title                = null
    multiqc_config               = null
    max_multiqc_email_size       = '25.MB'
    skip_mosdepth                = false
    skip_pangolin                = false
    skip_nextclade               = false
    skip_asciigenome             = false
    skip_variants_quast          = false
    skip_multiqc                 = false

    // Illumina QC, read trimming and filtering options
    kraken2_db                   = 's3://nf-core-awsmegatests/viralrecon/input_data/kraken2_human.tar.gz'
    kraken2_db_name              = 'human'
    kraken2_variants_host_filter = false
    kraken2_assembly_host_filter = true
    save_trimmed_fail            = false
    skip_fastqc                  = false
    skip_kraken2                 = false
    skip_fastp                   = false
    skip_cutadapt                = false

    // Illumina variant calling options
    callers                      = null
    min_mapped_reads             = 1000
    ivar_trim_noprimer           = false
    ivar_trim_offset             = null
    filter_duplicates            = false
    save_unaligned               = false
    save_mpileup                 = false
    skip_ivar_trim               = false
    skip_markduplicates          = true
    skip_picard_metrics          = false
    skip_snpeff                  = false
    skip_consensus               = false
    skip_variants                = false

    // Illumina de novo assembly options
    assemblers                   = 'spades'
    spades_mode                  = 'rnaviral'
    spades_hmm                   = null
    blast_db                     = null
    skip_bandage                 = false
    skip_blast                   = false
    skip_abacas                  = false
    skip_plasmidid               = false
    skip_assembly_quast          = false
    skip_assembly                = false

    // Boilerplate options
    outdir                       = './results'
    tracedir                     = "${params.outdir}/pipeline_info"
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    help                         = false
    enable_conda                 = false
    singularity_pull_docker_container = false
    validate_params              = true
    show_hidden_params           = false
    schema_ignore_params         = 'genomes,modules,igenomes_base'

    // Config options
    custom_config_version        = 'master'
    custom_config_base           = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames                    = [:]
    config_profile_name          = null
    config_profile_description   = null
    config_profile_contact       = null
    config_profile_url           = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                   = 128.GB
    max_cpus                     = 16
    max_time                     = 240.h
}

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_low {
        cpus   = { check_max( 2      * task.attempt, 'cpus'   ) }
        memory = { check_max( 12.GB  * task.attempt, 'memory' ) }
        time   = { check_max( 4.h    * task.attempt, 'time'   ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6      * task.attempt, 'cpus'   ) }
        memory = { check_max( 36.GB  * task.attempt, 'memory' ) }
        time   = { check_max( 8.h    * task.attempt, 'time'   ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12     * task.attempt, 'cpus'   ) }
        memory = { check_max( 72.GB  * task.attempt, 'memory' ) }
        time   = { check_max( 16.h   * task.attempt, 'time'   ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h   * task.attempt, 'time'   ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}

params {
    modules {
        'sra_ids_to_runinfo' {
            publish_dir     = 'public_data'
            publish_files   = ['tsv':'runinfo']
        }
        'sra_runinfo_to_ftp' {
            publish_dir     = 'public_data'
            publish_files   = ['tsv':'runinfo']
        }
        'sra_fastq_ftp' {
            args            = '-C - --max-time 1200'
            publish_dir     = 'public_data'
            publish_files   = ['fastq.gz':'', 'md5':'md5']
        }
        'sra_to_samplesheet' {
            publish_dir     = 'public_data'
            publish_files   = false
        }
        'sra_merge_samplesheet' {
            publish_dir     = 'public_data'
        }
        'nanopore_collapse_primers' {
            publish_dir     = 'genome'
        }
        'nanopore_snpeff_build' {
            publish_dir     = 'genome'
        }
        'nanopore_pycoqc' {
            publish_dir     = 'pycoqc'
        }
        'nanopore_artic_guppyplex' {
            args            = '--min-length 400 --max-length 700'
            publish_files   = false
            publish_dir     = 'guppyplex'
        }
        'nanopore_nanoplot' {
            publish_by_meta = true
        }
        'nanopore_artic_minion' {
            args            = '--normalise 500'
            publish_files   = ['.sorted.bam':'', '.sorted.bam.bai':'', 'fail.vcf':'', 'merged.vcf':'', 'primers.vcf':'', 'gz':'', 'tbi':'', '.consensus.fasta':'']
            publish_dir     = "${params.artic_minion_caller}"
        }
        'nanopore_filter_bam' {
            args            = '-b -F 4'
            suffix          = '.mapped.sorted'
            publish_dir     = "${params.artic_minion_caller}"
        }
        'nanopore_filter_bam_stats' {
            suffix          = '.mapped.sorted'
            publish_files   = ['bai':'', 'stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = "${params.artic_minion_caller}"
        }
        'nanopore_bcftools_stats' {
            publish_files   = ['txt':'']
            publish_dir     = "${params.artic_minion_caller}/bcftools_stats"
        }
        'nanopore_mosdepth_genome' {
            args            = '--fast-mode'
            publish_files   = ['summary.txt':'']
            publish_dir     = "${params.artic_minion_caller}/mosdepth/genome"
        }
        'nanopore_plot_mosdepth_regions_genome' {
            args            = '--input_suffix .regions.bed.gz'
            publish_files   = ['tsv':'', 'pdf': '']
            publish_dir     = "${params.artic_minion_caller}/mosdepth/genome"
        }
        'nanopore_mosdepth_amplicon' {
            args            = '--fast-mode --use-median --thresholds 0,1,10,50,100,500'
            publish_files   = ['summary.txt':'']
            publish_dir     = "${params.artic_minion_caller}/mosdepth/amplicon"
        }
        'nanopore_plot_mosdepth_regions_amplicon' {
            args            = '--input_suffix .regions.bed.gz'
            publish_files   = ['tsv':'', 'pdf': '']
            publish_dir     = "${params.artic_minion_caller}/mosdepth/amplicon"
        }
        'nanopore_pangolin' {
            publish_dir     = "${params.artic_minion_caller}/pangolin"
        }
        'nanopore_nextclade' {
            publish_files   = ['csv':'']
            publish_dir     = "${params.artic_minion_caller}/nextclade"
        }
        'nanopore_asciigenome' {
            publish_dir     = "${params.artic_minion_caller}/asciigenome"
            publish_by_meta = true
        }
        'nanopore_quast' {
            publish_files   = ['quast':'']
            publish_dir     = "${params.artic_minion_caller}"
        }
        'nanopore_snpeff' {
            publish_files   = ['csv':'', 'txt':'', 'html':'']
            publish_dir     = "${params.artic_minion_caller}/snpeff"
        }
        'nanopore_snpeff_bgzip' {
            suffix          = '.snpeff'
            publish_dir     = "${params.artic_minion_caller}/snpeff"
        }
        'nanopore_snpeff_tabix' {
            args            = '-p vcf -f'
            suffix          = '.snpeff'
            publish_dir     = "${params.artic_minion_caller}/snpeff"
        }
        'nanopore_snpeff_stats' {
            suffix          = '.snpeff'
            publish_files   = ['txt':'bcftools_stats']
            publish_dir     = "${params.artic_minion_caller}/snpeff"
        }
        'nanopore_snpsift' {
            publish_dir     = "${params.artic_minion_caller}/snpeff"
        }
        'nanopore_multiqc' {
            args            = ''
            publish_files   = ['_data':"${params.artic_minion_caller}", 'html':"${params.artic_minion_caller}", 'csv':"${params.artic_minion_caller}"]
        }
        'illumina_bedtools_getfasta' {
            args            = '-s -nameOnly'
            publish_dir     = 'genome'
        }
        'illumina_collapse_primers_illumina' {
            publish_dir     = 'genome'
        }
        'illumina_bowtie2_build' {
            args            = '--seed 1'
            publish_dir     = 'genome/index'
        }
        'illumina_snpeff_build' {
            publish_dir     = 'genome/db'
        }
        'illumina_blast_makeblastdb' {
            args            = '-parse_seqids -dbtype nucl'
            publish_dir     = 'genome/db'
        }
        'illumina_kraken2_build' {
            args            = ''
            args2           = ''
            args3           = ''
            publish_dir     = 'genome/db'
        }
        'illumina_cat_fastq' {
            publish_files   = false
            publish_dir     = 'fastq'
        }
        'illumina_fastqc_raw' {
            args            = '--quiet'
            publish_dir     = 'fastqc/raw'
        }
        'illumina_fastqc_trim' {
            args            = '--quiet'
            publish_dir     = 'fastqc/trim'
        }
        'illumina_fastp' {
            args            = '--cut_front --cut_tail --trim_poly_x --cut_mean_quality 30 --qualified_quality_phred 30 --unqualified_percent_limit 10 --length_required 50'
            publish_files   = ['json':'', 'html':'', 'log': 'log']
        }
        'illumina_kraken2_kraken2' {
            args            = '--report-zero-counts'
            publish_files   = ['txt':'']
        }
        'illumina_bowtie2_align' {
            args            = '--local --very-sensitive-local --seed 1'
            args2           = '-F4'
            publish_files   = ['log':'log']
            publish_dir     = 'variants/bowtie2'
        }
        'illumina_bowtie2_sort_bam' {
            suffix          = '.sorted'
            publish_files   = ['bam':'', 'bai':'', 'stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = 'variants/bowtie2'
        }
        'illumina_ivar_trim' {
            args            = '-m 30 -q 20'
            suffix          = '.ivar_trim'
            publish_files   = ['log':'log']
            publish_dir     = 'variants/bowtie2'
        }
        'illumina_ivar_trim_sort_bam' {
            suffix          = '.ivar_trim.sorted'
            publish_files   = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = 'variants/bowtie2'
        }
        'illumina_picard_markduplicates' {
            args            = 'ASSUME_SORTED=true VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
            suffix          = '.markduplicates.sorted'
            publish_files   = ['bam': '', 'metrics.txt':'picard_metrics']
            publish_dir     = 'variants/bowtie2'
        }
        'illumina_picard_markduplicates_sort_bam' {
            suffix          = '.markduplicates.sorted'
            publish_files   = ['bai':'', 'stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = 'variants/bowtie2'
        }
        'illumina_picard_collectmultiplemetrics' {
            args            = 'VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
            publish_files   = ['metrics':'picard_metrics', 'pdf': 'picard_metrics/pdf']
            publish_dir     = 'variants/bowtie2'
        }
        'illumina_mosdepth_genome' {
            args            = '--fast-mode'
            publish_files   = ['summary.txt':'']
            publish_dir     = 'variants/bowtie2/mosdepth/genome'
        }
        'illumina_plot_mosdepth_regions_genome' {
            args            = '--input_suffix .regions.bed.gz'
            publish_files   = ['tsv':'', 'pdf': '']
            publish_dir     = 'variants/bowtie2/mosdepth/genome'
        }
        'illumina_mosdepth_amplicon' {
            args            = '--fast-mode --use-median --thresholds 0,1,10,50,100,500'
            publish_files   = ['summary.txt':'']
            publish_dir     = 'variants/bowtie2/mosdepth/amplicon'
        }
        'illumina_plot_mosdepth_regions_amplicon' {
            args            = '--input_suffix .regions.bed.gz'
            publish_files   = ['tsv':'', 'pdf': '']
            publish_dir     = 'variants/bowtie2/mosdepth/amplicon'
        }
        'illumina_ivar_variants' {
            args            = '-t 0.25 -q 20 -m 10'
            args2           = '--count-orphans --no-BAQ --max-depth 0 --min-BQ 0'
            publish_dir     = 'variants/ivar'
        }
        'illumina_ivar_variants_to_vcf' {
            publish_files   = ['log':'log']
            publish_dir     = 'variants/ivar'
        }
        'illumina_ivar_tabix_bgzip' {
            publish_dir     = 'variants/ivar'
        }
        'illumina_ivar_tabix_tabix' {
            args            = '-p vcf -f'
            publish_dir     = 'variants/ivar'
        }
        'illumina_ivar_bcftools_stats' {
            publish_files   = ['txt':'bcftools_stats']
            publish_dir     = 'variants/ivar'
        }
        'illumina_ivar_consensus' {
            args            = '-t 0.75 -q 20 -m 10 -n N'
            args2           = '--count-orphans --no-BAQ --max-depth 0 --min-BQ 0 -aa'
            suffix          = '.consensus'
            publish_dir     = 'variants/ivar/consensus'
        }
        'illumina_ivar_consensus_plot' {
            suffix          = '.consensus'
            publish_dir     = 'variants/ivar/consensus/base_qc'
        }
        'illumina_ivar_snpeff' {
            publish_files   = ['csv':'', 'txt':'', 'html':'']
            publish_dir     = 'variants/ivar/snpeff'
        }
        'illumina_ivar_snpeff_bgzip' {
            suffix          = '.snpeff'
            publish_dir     = 'variants/ivar/snpeff'
        }
        'illumina_ivar_snpeff_tabix' {
            args            = '-p vcf -f'
            suffix          = '.snpeff'
            publish_dir     = 'variants/ivar/snpeff'
        }
        'illumina_ivar_snpeff_stats' {
            suffix          = '.snpeff'
            publish_files   = ['txt':'bcftools_stats']
            publish_dir     = 'variants/ivar/snpeff'
        }
        'illumina_ivar_snpsift' {
            publish_dir     = 'variants/ivar/snpeff'
        }
        'illumina_ivar_quast' {
            publish_files   = ['quast':'']
            publish_dir     = 'variants/ivar'
        }
        'illumina_ivar_pangolin' {
            publish_dir     = 'variants/ivar/pangolin'
        }
        'illumina_ivar_nextclade' {
            publish_files   = ['csv':'']
            publish_dir     = 'variants/ivar/nextclade'
        }
        'illumina_ivar_asciigenome' {
            publish_dir     = 'variants/ivar/asciigenome'
            publish_by_meta = true
        }
        'illumina_bcftools_mpileup' {
            args            = '--count-orphans --no-BAQ --max-depth 0 --min-BQ 20 --annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SP,INFO/AD,INFO/ADF,INFO/ADR'
            args2           = '--ploidy 1 --keep-alts --keep-masked-ref --multiallelic-caller --variants-only'
            args3           = "--include 'INFO/DP>=10'"
            publish_files   = ['gz':'', 'gz.tbi':'', 'stats.txt':'bcftools_stats']
            publish_dir     = 'variants/bcftools'
        }
        'illumina_bcftools_consensus_genomecov' {
            args            = "-bga | awk '\$4 < 10'"
            suffix          = '.coverage'
            publish_files   = false
            publish_dir     = 'variants/bcftools'
        }
        'illumina_bcftools_consensus_merge' {
            suffix          = '.coverage.merged'
            publish_files   = false
            publish_dir     = 'variants/bcftools'
        }
        'illumina_bcftools_consensus_mask' {
            suffix          = '.coverage.masked'
            publish_files   = false
            publish_dir     = 'variants/bcftools'
        }
        'illumina_bcftools_consensus_maskfasta' {
            suffix          = '.masked'
            publish_files   = false
            publish_dir     = 'variants/bcftools'
        }
        'illumina_bcftools_consensus_bcftools' {
            suffix          = '.consensus'
            publish_dir     = 'variants/bcftools/consensus'
        }
        'illumina_bcftools_consensus_plot' {
            suffix          = '.consensus'
            publish_dir     = 'variants/bcftools/consensus/base_qc'
        }
        'illumina_bcftools_snpeff' {
            publish_files   = ['csv':'', 'txt':'', 'html':'']
            publish_dir     = 'variants/bcftools/snpeff'
        }
        'illumina_bcftools_snpeff_bgzip' {
            suffix          = '.snpeff'
            publish_dir     = 'variants/bcftools/snpeff'
        }
        'illumina_bcftools_snpeff_tabix' {
            args            = '-p vcf -f'
            suffix          = '.snpeff'
            publish_dir     = 'variants/bcftools/snpeff'
        }
        'illumina_bcftools_snpeff_stats' {
            suffix          = '.snpeff'
            publish_files   = ['txt':'bcftools_stats']
            publish_dir     = 'variants/bcftools/snpeff'
        }
        'illumina_bcftools_snpsift' {
            publish_dir     = 'variants/bcftools/snpeff'
        }
        'illumina_bcftools_quast' {
            publish_files   = ['quast':'']
            publish_dir     = 'variants/bcftools'
        }
        'illumina_bcftools_pangolin' {
            publish_dir     = 'variants/bcftools/pangolin'
        }
        'illumina_bcftools_nextclade' {
            publish_files   = ['csv':'']
            publish_dir     = 'variants/bcftools/nextclade'
        }
        'illumina_bcftools_asciigenome' {
            publish_dir     = 'variants/bcftools/asciigenome'
            publish_by_meta = true
        }
        'illumina_bcftools_isec' {
            args            = '--nfiles +2 --output-type z'
            publish_dir     = 'variants/intersect'
        }
        'illumina_cutadapt' {
            args            = '--overlap 5 --minimum-length 30 --error-rate 0.1'
            suffix          = '.primer_trim'
            publish_files   = ['log':'log']
            publish_dir     = 'assembly/cutadapt'
        }
        'illumina_cutadapt_fastqc' {
            args            = '--quiet'
            suffix          = 'primer_trim'
            publish_dir     = 'assembly/cutadapt/fastqc'
        }
        'illumina_spades' {
            args            = ''
            publish_files   = ['log':'log', 'fa':'', 'gfa':'']
            publish_dir     = "assembly/spades/${params.spades_mode}"
        }
        'illumina_spades_bandage' {
            args            = '--height 1000'
            publish_dir     = "assembly/spades/${params.spades_mode}/bandage"
        }
        'illumina_spades_blastn' {
            args            = "-outfmt '6 stitle std slen qlen qcovs'"
            publish_dir     = "assembly/spades/${params.spades_mode}/blastn"
        }
        'illumina_spades_blastn_filter' {
            suffix          = '.filter.blastn'
            publish_dir     = "assembly/spades/${params.spades_mode}/blastn"
        }
        'illumina_spades_abacas' {
            args            = '-m -p nucmer'
            publish_dir     = "assembly/spades/${params.spades_mode}/abacas"
        }
        'illumina_spades_plasmidid' {
            args            = '--only-reconstruct -C 47 -S 47 -i 60 --no-trim -k 0.80'
            publish_files   = ['html':'', 'tab':'', 'logs':'', 'images':'']
            publish_dir     = "assembly/spades/${params.spades_mode}/plasmidid"
        }
        'illumina_spades_quast' {
            publish_files   = ['quast':'']
            publish_dir     = "assembly/spades/${params.spades_mode}"
        }
        'illumina_unicycler' {
            publish_files   = ['log':'log', 'fa':'', 'gfa':'']
            publish_dir     = 'assembly/unicycler'
        }
        'illumina_unicycler_bandage' {
            args            = '--height 1000'
            publish_dir     = 'assembly/unicycler/bandage'
        }
        'illumina_unicycler_blastn' {
            args            = "-outfmt '6 stitle std slen qlen qcovs'"
            publish_dir     = 'assembly/unicycler/blastn'
        }
        'illumina_unicycler_blastn_filter' {
            suffix          = '.filter.blastn'
            publish_dir     = 'assembly/unicycler/blastn'
        }
        'illumina_unicycler_abacas' {
            args            = '-m -p nucmer'
            publish_dir     = 'assembly/unicycler/abacas'
        }
        'illumina_unicycler_plasmidid' {
            args            = '--only-reconstruct -C 47 -S 47 -i 60 --no-trim -k 0.80'
            publish_files   = ['html':'', 'tab':'', 'logs':'', 'images':'']
            publish_dir     = 'assembly/unicycler/plasmidid'
        }
        'illumina_unicycler_quast' {
            publish_files   = ['quast':'']
            publish_dir     = 'assembly/unicycler'
        }
        'illumina_minia' {
            args            = '-kmer-size 31 -abundance-min 20'
            publish_dir     = 'assembly/minia'
        }
        'illumina_minia_blastn' {
            args            = "-outfmt '6 stitle std slen qlen qcovs'"
            publish_dir     = 'assembly/minia/blastn'
        }
        'illumina_minia_blastn_filter' {
            suffix          = '.filter.blastn'
            publish_dir     = 'assembly/minia/blastn'
        }
        'illumina_minia_abacas' {
            args            = '-m -p nucmer'
            publish_dir     = 'assembly/minia/abacas'
        }
        'illumina_minia_plasmidid' {
            args            = '--only-reconstruct -C 47 -S 47 -i 60 --no-trim -k 0.80'
            publish_files   = ['html':'', 'tab':'', 'logs':'', 'images':'']
            publish_dir     = 'assembly/minia/plasmidid'
        }
        'illumina_minia_quast' {
            publish_files   = ['quast':'']
            publish_dir     = 'assembly/minia'
        }
        'illumina_multiqc' {
            args            = ''
            publish_files   = ['_data':'', 'html':'']
        }
    }
}


params {
  genomes {
    'MN908947.3' {
      fasta            = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/GCA_009858895.3_ASM985889v3_genomic.200409.fna.gz'
      gff              = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/GCA_009858895.3_ASM985889v3_genomic.200409.gff.gz'
      primer_sets {
        artic {
          '1' {
            fasta      = 'https://github.com/artic-network/artic-ncov2019/raw/master/primer_schemes/nCoV-2019/V1/nCoV-2019.reference.fasta'
            gff        = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/GCA_009858895.3_ASM985889v3_genomic.200409.gff.gz'
            primer_bed = 'https://github.com/artic-network/artic-ncov2019/raw/master/primer_schemes/nCoV-2019/V1/nCoV-2019.primer.bed'
            scheme     = 'nCoV-2019'
          }
          '2' {
            fasta      = 'https://github.com/artic-network/artic-ncov2019/raw/master/primer_schemes/nCoV-2019/V2/nCoV-2019.reference.fasta'
            gff        = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/GCA_009858895.3_ASM985889v3_genomic.200409.gff.gz'
            primer_bed = 'https://github.com/artic-network/artic-ncov2019/raw/master/primer_schemes/nCoV-2019/V2/nCoV-2019.primer.bed'
            scheme     = 'nCoV-2019'
          }
          '3' {
            fasta      = 'https://github.com/artic-network/artic-ncov2019/raw/master/primer_schemes/nCoV-2019/V3/nCoV-2019.reference.fasta'
            gff        = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/GCA_009858895.3_ASM985889v3_genomic.200409.gff.gz'
            primer_bed = 'https://github.com/artic-network/artic-ncov2019/raw/master/primer_schemes/nCoV-2019/V3/nCoV-2019.primer.bed'
            scheme     = 'nCoV-2019'
          }
          '4' {
            fasta      = 'https://github.com/artic-network/artic-ncov2019/raw/master/primer_schemes/nCoV-2019/V4/SARS-CoV-2.reference.fasta'
            gff        = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/GCA_009858895.3_ASM985889v3_genomic.200409.gff.gz'
            primer_bed = 'https://github.com/artic-network/artic-ncov2019/raw/master/primer_schemes/nCoV-2019/V4/SARS-CoV-2.scheme.bed'
            scheme     = 'SARS-CoV-2'
          }
          '1200' {
            fasta      = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/primer_schemes/artic/nCoV-2019/V1200/nCoV-2019.reference.fasta'
            gff        = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/GCA_009858895.3_ASM985889v3_genomic.200409.gff.gz'
            primer_bed = 'https://github.com/nf-core/test-datasets/raw/viralrecon/genome/MN908947.3/primer_schemes/artic/nCoV-2019/V1200/nCoV-2019.bed'
            scheme     = 'nCoV-2019'
          }
        }
      }
    }
  }
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
}

// Increase time available to build Conda environment
conda { createTimeout = "120 min" }

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    enabled = true
    file    = "trace.html"
}
report {
    enabled = true
    file    = "report.html"
}
trace {
    enabled = true
    file    = "trace.txt"
}
dag {
    enabled = true
    file    = "flowchart.svg"
}

manifest {
    name            = 'nf-core/viralrecon'
    author          = 'Sarai Varona and Sara Monzon'
    homePage        = 'https://github.com/nf-core/viralrecon'
    description     = 'Assembly and intrahost/low-frequency variant calling for viral samples'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '2.2'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}